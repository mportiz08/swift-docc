{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_ChannelInboundHandler"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"_EmittingChannelHandler"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please refer to "},{"type":"codeVoice","code":"_ChannelInboundHandler"},{"type":"text","text":" and "},{"type":"codeVoice","code":"_EmittingChannelHandler"},{"type":"text","text":" for more details on the provided methods."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/nio\/channelinboundhandler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelHandler"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/AcceptBackoffHandler","doc:\/\/org.swift.docc\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","doc:\/\/org.swift.docc\/documentation\/NIO\/BackPressureHandler","doc:\/\/org.swift.docc\/documentation\/NIO\/ByteToMessageHandler","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerUpgradeHandler","doc:\/\/org.swift.docc\/documentation\/NIO\/IdleStateHandler","doc:\/\/org.swift.docc\/documentation\/NIO\/NIOCloseOnErrorHandler","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPClientResponseAggregator","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPServerRequestAggregator","doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLClientHandler","doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLHandler","doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLServerHandler"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}],"title":"ChannelInboundHandler","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:3NIO21ChannelInboundHandlerP","modules":[{"name":"NIO"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.docc\/documentation\/NIO"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/InboundIn","doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/InboundOut"]},{"title":"Instance Methods","identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/unwrapInboundIn(_:)-39cvr","doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/wrapInboundOut(_:)-2bhnr"]}],"references":{"doc://org.swift.docc/documentation/NIO/ChannelInboundHandler/unwrapInboundIn(_:)-39cvr":{"defaultImplementations":1,"role":"symbol","title":"unwrapInboundIn(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapInboundIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:3NIO6NIOAnyV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"InboundIn","preciseIdentifier":"s:3NIO21ChannelInboundHandlerP0C2InQa"}],"abstract":[{"type":"text","text":"Unwrap the provided "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" that was passed to "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/unwrapInboundIn(_:)-39cvr","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/nio\/channelinboundhandler\/unwrapinboundin(_:)-39cvr"},"doc://org.swift.docc/documentation/NIO/BackPressureHandler":{"role":"symbol","title":"BackPressureHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BackPressureHandler"}],"abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/BackPressureHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BackPressureHandler"}],"url":"\/documentation\/nio\/backpressurehandler"},"doc://org.swift.docc/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"role":"symbol","title":"NIOHTTPClientUpgradeHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"type":"text","text":" "},{"type":"text","text":"the a protocol. It may add headers for a set of protocols in preference order."},{"type":"text","text":" "},{"type":"text","text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply"},{"type":"text","text":" "},{"type":"text","text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"url":"\/documentation\/niohttp1\/niohttpclientupgradehandler"},"doc://org.swift.docc/documentation/NIO/ChannelInboundHandler/wrapInboundOut(_:)-2bhnr":{"defaultImplementations":1,"role":"symbol","title":"wrapInboundOut(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"InboundOut","preciseIdentifier":"s:3NIO21ChannelInboundHandlerP0C3OutQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:3NIO6NIOAnyV"}],"abstract":[{"type":"text","text":"Wrap the provided "},{"type":"codeVoice","code":"InboundOut"},{"type":"text","text":" that will be passed to the next "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" by calling "},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/wrapInboundOut(_:)-2bhnr","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/nio\/channelinboundhandler\/wrapinboundout(_:)-2bhnr"},"doc://org.swift.docc/documentation/NIOSSL/NIOSSLServerHandler":{"role":"symbol","title":"NIOSSLServerHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLServerHandler"}],"abstract":[{"type":"text","text":"A channel handler that wraps a channel in TLS using NIOSSL. This"},{"type":"text","text":" "},{"type":"text","text":"handler can be used in channels that are acting as the server in"},{"type":"text","text":" "},{"type":"text","text":"the TLS dialog. For client connections, use the "},{"type":"codeVoice","code":"NIOSSLClientHandler"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLServerHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSSLServerHandler"}],"url":"\/documentation\/niossl\/niosslserverhandler"},"doc://org.swift.docc/documentation/NIOSSL/NIOSSLClientHandler":{"role":"symbol","title":"NIOSSLClientHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLClientHandler"}],"abstract":[{"type":"text","text":"A channel handler that wraps a channel in TLS using NIOSSL."},{"type":"text","text":" "},{"type":"text","text":"This handler can be used in channels that are acting as the client"},{"type":"text","text":" "},{"type":"text","text":"in the TLS dialog. For server connections, use the "},{"type":"codeVoice","code":"NIOSSLServerHandler"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLClientHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSSLClientHandler"}],"url":"\/documentation\/niossl\/niosslclienthandler"},"doc://org.swift.docc/documentation/NIO/NIOCloseOnErrorHandler":{"role":"symbol","title":"NIOCloseOnErrorHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that closes the channel when an error is caught"}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOCloseOnErrorHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"url":"\/documentation\/nio\/niocloseonerrorhandler"},"doc://org.swift.docc/documentation/NIOHTTP1/HTTPServerProtocolErrorHandler":{"role":"symbol","title":"HTTPServerProtocolErrorHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerProtocolErrorHandler"}],"abstract":[{"type":"text","text":"A simple channel handler that catches errors emitted by parsing HTTP requests"},{"type":"text","text":" "},{"type":"text","text":"and sends 400 Bad Request responses."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPServerProtocolErrorHandler"}],"url":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler"},"doc://org.swift.docc/documentation/NIOSSL/NIOSSLHandler":{"role":"symbol","title":"NIOSSLHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLHandler"}],"abstract":[{"type":"text","text":"The base class for all NIOSSL handlers. This class cannot actually be instantiated by"},{"type":"text","text":" "},{"type":"text","text":"users directly: instead, users must select which mode they would like their handler to"},{"type":"text","text":" "},{"type":"text","text":"operate in, client or server."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOSSL\/NIOSSLHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSSLHandler"}],"url":"\/documentation\/niossl\/niosslhandler"},"doc://org.swift.docc/documentation/NIO/ChannelInboundHandler":{"role":"symbol","title":"ChannelInboundHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}],"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"url":"\/documentation\/nio\/channelinboundhandler"},"doc://org.swift.docc/documentation/NIO/AcceptBackoffHandler":{"role":"symbol","title":"AcceptBackoffHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AcceptBackoffHandler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that implements a backoff for a "},{"type":"codeVoice","code":"ServerChannel"},{"type":"text","text":" when accept produces an "},{"type":"codeVoice","code":"IOError"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These errors are often recoverable by reducing the rate at which we call accept."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/AcceptBackoffHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AcceptBackoffHandler"}],"url":"\/documentation\/nio\/acceptbackoffhandler"},"doc://org.swift.docc/documentation/NIOHTTP1/HTTPServerUpgradeHandler":{"role":"symbol","title":"HTTPServerUpgradeHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerUpgradeHandler"}],"abstract":[{"type":"text","text":"A server-side channel handler that receives HTTP requests and optionally performs a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"Removes itself from the channel pipeline after the first inbound request on the connection, regardless of"},{"type":"text","text":" "},{"type":"text","text":"whether the upgrade succeeded or not."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerUpgradeHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPServerUpgradeHandler"}],"url":"\/documentation\/niohttp1\/httpserverupgradehandler"},"doc://org.swift.docc/documentation/NIO/ChannelInboundHandler/InboundIn":{"role":"symbol","title":"InboundIn","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundIn"}],"abstract":[{"type":"text","text":"The type of the inbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/InboundIn","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/nio\/channelinboundhandler\/inboundin"},"doc://org.swift.docc/documentation/NIO/IdleStateHandler":{"role":"symbol","title":"IdleStateHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"IdleStateHandler"}],"abstract":[{"type":"text","text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/IdleStateHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IdleStateHandler"}],"url":"\/documentation\/nio\/idlestatehandler"},"doc://org.swift.docc/documentation/NIOTLS/ApplicationProtocolNegotiationHandler":{"role":"symbol","title":"ApplicationProtocolNegotiationHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"abstract":[{"type":"text","text":"A helper "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that makes it easy to swap channel pipelines"},{"type":"text","text":" "},{"type":"text","text":"based on the result of an ALPN negotiation."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler"},"doc://org.swift.docc/documentation/NIO/ChannelInboundHandler/InboundOut":{"role":"symbol","title":"InboundOut","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"}],"abstract":[{"type":"text","text":"The type of the inbound data which will be forwarded to the next "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelInboundHandler\/InboundOut","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/nio\/channelinboundhandler\/inboundout"},"doc://org.swift.docc/documentation/NIOHTTP1/NIOHTTPClientResponseAggregator":{"role":"symbol","title":"NIOHTTPClientResponseAggregator","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientResponseAggregator"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that handles HTTP chunked "},{"type":"codeVoice","code":"HTTPClientResponsePart"},{"type":"text","text":" "},{"type":"text","text":"messages by aggregating individual message chunks into a single"},{"type":"text","text":" "},{"type":"codeVoice","code":"NIOHTTPClientResponseFull"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPClientResponseAggregator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientResponseAggregator"}],"url":"\/documentation\/niohttp1\/niohttpclientresponseaggregator"},"doc://org.swift.docc/documentation/NIO":{"role":"collection","title":"NIO","abstract":[],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO","kind":"symbol","type":"topic","url":"\/documentation\/nio"},"doc://org.swift.docc/documentation/NIO/ChannelHandler":{"role":"symbol","title":"ChannelHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"abstract":[{"type":"text","text":"You should "},{"type":"emphasis","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" implement this protocol directly. Please implement one of its sub-protocols."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ChannelHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/nio\/channelhandler"},"doc://org.swift.docc/documentation/NIOHTTP1/NIOHTTPServerRequestAggregator":{"role":"symbol","title":"NIOHTTPServerRequestAggregator","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPServerRequestAggregator"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that handles HTTP chunked "},{"type":"codeVoice","code":"HTTPServerRequestPart"},{"type":"text","text":" "},{"type":"text","text":"messages by aggregating individual message chunks into a single"},{"type":"text","text":" "},{"type":"codeVoice","code":"NIOHTTPServerRequestFull"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/NIOHTTPServerRequestAggregator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOHTTPServerRequestAggregator"}],"url":"\/documentation\/niohttp1\/niohttpserverrequestaggregator"},"doc://org.swift.docc/documentation/NIOHTTP1/HTTPServerPipelineHandler":{"role":"symbol","title":"HTTPServerPipelineHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that handles HTTP pipelining by buffering inbound data until a"},{"type":"text","text":" "},{"type":"text","text":"response has been sent."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPServerPipelineHandler"}],"url":"\/documentation\/niohttp1\/httpserverpipelinehandler"},"doc://org.swift.docc/documentation/NIO/ByteToMessageHandler":{"conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"ByteToMessageHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageHandler"}],"abstract":[{"type":"text","text":"A handler which turns a given "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/ByteToMessageHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteToMessageHandler"}],"url":"\/documentation\/nio\/bytetomessagehandler"}}}