{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Decoder"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageDecoder","preciseIdentifier":"s:3NIO33NIOSingleStepByteToMessageDecoderP","text":"NIOSingleStepByteToMessageDecoder"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" is first initialized with a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":". Then"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"process"},{"type":"text","text":" as each "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" is received from the stream. The closure is called repeatedly with each message produced by"},{"type":"text","text":" "},{"type":"text","text":"the decoder."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When your stream ends, call "},{"type":"codeVoice","code":"finishProcessing"},{"type":"text","text":" to ensure all buffered data is passed to your decoder. This will call "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" "},{"type":"text","text":"one or more times with any remaining data."}]},{"anchor":"Example","level":3,"type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Below is an example of a protocol decoded by "},{"type":"codeVoice","code":"TwoByteStringCodec"},{"type":"text","text":" that is sent over HTTP. "},{"type":"codeVoice","code":"RawBodyMessageHandler"},{"type":"text","text":" forwards the headers"},{"type":"text","text":" "},{"type":"text","text":"and trailers directly and uses "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" to send whole decoded messages."}]},{"type":"codeListing","syntax":"markdown","code":["class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {","    typealias InboundOut = String","","    public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {","        return buffer.readString(length: 2)","    }","","    public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {","        return try self.decode(buffer: &buffer)","    }","}","","class RawBodyMessageHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPServerRequestPart \/\/ alias for HTTPPart<HTTPRequestHead, ByteBuffer>","    \/\/ This converts the body from ByteBuffer to String, our message type","    typealias InboundOut = HTTPPart<HTTPRequestHead, String>","","    private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let req = self.unwrapInboundIn(data)","        do {","            switch req {","            case .head(let head):","                \/\/ simply forward on the head","                context.fireChannelRead(self.wrapInboundOut(.head(head)))","            case .body(let body):","                if self.messageProcessor == nil {","                    self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())","                }","                try self.messageProcessor!.process(buffer: body) { message in","                    self.channelReadMessage(context: context, message: message)","                }","            case .end(let trailers):","                \/\/ Forward on any remaining messages and the trailers","                try self.messageProcessor?.finishProcessing(seenEOF: false) { message in","                    self.channelReadMessage(context: context, message: message)","                }","                context.fireChannelRead(self.wrapInboundOut(.end(trailers)))","            }","        } catch {","            context.fireErrorCaught(error)","        }","    }","","    \/\/ Forward on the body messages as whole messages","    func channelReadMessage(context: ChannelHandlerContext, message: String) {","        context.fireChannelRead(self.wrapInboundOut(.body(message)))","    }","}","","private class DecodedBodyHTTPHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPPart<HTTPRequestHead, String>","    typealias OutboundOut = HTTPServerResponsePart","","    var msgs: [String] = []","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let message = self.unwrapInboundIn(data)","","        switch message {","        case .head(let head):","            print(\"head: \\(head)\")","        case .body(let msg):","            self.msgs.append(msg)","        case .end(let trailers):","            print(\"trailers: \\(trailers)\")","            var responseBuffer = context.channel.allocator.buffer(capacity: 32)","            for msg in msgs {","                responseBuffer.writeString(msg)","                responseBuffer.writeStaticString(\"\\n\")","            }","            var headers = HTTPHeaders()","            headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(","                HTTPResponseHead(version: .http1_1,","                                 status: .ok, headers: headers))), promise: nil)","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(","                .byteBuffer(responseBuffer))), promise: nil)","            context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)","        }","    }","}","","let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in","    channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in","        channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])","    }","})","let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/nio\/niosinglestepbytetomessageprocessor"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" uses a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":" to produce messages"},{"type":"text","text":" "},{"type":"text","text":"from a stream of incoming bytes. It works like "},{"type":"codeVoice","code":"ByteToMessageHandler"},{"type":"text","text":" but may be used outside of the channel pipeline. This allows"},{"type":"text","text":" "},{"type":"text","text":"processing of wrapped protocols in a general way."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"title":"NIOSingleStepByteToMessageProcessor","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:3NIO35NIOSingleStepByteToMessageProcessorC","modules":[{"name":"NIO"}],"navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.docc\/documentation\/NIO"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"]}],"references":{"doc://org.swift.docc/documentation/NIO/NIOSingleStepByteToMessageProcessor/init(_:maximumBufferSize:)":{"role":"symbol","title":"init(_:maximumBufferSize:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:3NIO35NIOSingleStepByteToMessageProcessorC7Decoderxmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maximumBufferSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)","kind":"symbol","type":"topic","url":"\/documentation\/nio\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)"},"doc://org.swift.docc/documentation/NIO/NIOSingleStepByteToMessageProcessor":{"role":"symbol","title":"NIOSingleStepByteToMessageProcessor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" uses a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":" to produce messages"},{"type":"text","text":" "},{"type":"text","text":"from a stream of incoming bytes. It works like "},{"type":"codeVoice","code":"ByteToMessageHandler"},{"type":"text","text":" but may be used outside of the channel pipeline. This allows"},{"type":"text","text":" "},{"type":"text","text":"processing of wrapped protocols in a general way."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"url":"\/documentation\/nio\/niosinglestepbytetomessageprocessor"},"doc://org.swift.docc/documentation/NIO/NIOSingleStepByteToMessageProcessor/finishProcessing(seenEOF:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"finishProcessing(seenEOF:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finishProcessing"},{"kind":"text","text":"("},{"kind":"externalParam","text":"seenEOF"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:3NIO35NIOSingleStepByteToMessageProcessorC7Decoderxmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut","preciseIdentifier":"s:3NIO20ByteToMessageDecoderP10InboundOutQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Call when there is no data left in the stream. Calls "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"."},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" one or more times. If there is no data left"},{"type":"text","text":" "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" will be called one time with an empty "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","kind":"symbol","type":"topic","url":"\/documentation\/nio\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)"},"doc://org.swift.docc/documentation/NIO/NIOSingleStepByteToMessageProcessor/process(buffer:_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"process(buffer:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"process"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:3NIO10ByteBufferV"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:3NIO35NIOSingleStepByteToMessageProcessorC7Decoderxmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut","preciseIdentifier":"s:3NIO20ByteToMessageDecoderP10InboundOutQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Feed data into the "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)","kind":"symbol","type":"topic","url":"\/documentation\/nio\/niosinglestepbytetomessageprocessor\/process(buffer:_:)"},"doc://org.swift.docc/documentation/NIO":{"role":"collection","title":"NIO","abstract":[],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO","kind":"symbol","type":"topic","url":"\/documentation\/nio"},"doc://org.swift.docc/documentation/NIO/NIOSingleStepByteToMessageDecoder":{"role":"symbol","title":"NIOSingleStepByteToMessageDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"abstract":[{"type":"text","text":"A simplified version of "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":" that can generate zero or one messages for each invocation of "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" or "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"identifier":"doc:\/\/org.swift.docc\/documentation\/NIO\/NIOSingleStepByteToMessageDecoder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"url":"\/documentation\/nio\/niosinglestepbytetomessagedecoder"}}}